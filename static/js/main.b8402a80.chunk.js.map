{"version":3,"sources":["component/Calculator.js","component/Result.js","component/Key.js","component/KeyPad.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","result","setResult","reset","onKeyClick","button","console","log","calculate","backspace","slice","checkResult","includes","replace","eval","e","className","onClick","Result","props","Key","name","KeyPad","Keys","map","key","k","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wlBAKA,SAASA,aAAc,IAAD,UACUC,oDAAS,IADnB,sLACXC,OADW,cACHC,UADG,cAGlB,SAASC,QACLD,UAAU,IAGd,SAASE,WAAWC,GAChBC,QAAQC,IAAI,eAAgBF,GACd,MAAXA,EACCG,YACiB,MAAXH,EACNF,QAEe,OAAXE,EACJI,YAEAP,UAAUD,OAASI,GAI3B,SAASI,YACLP,UAAUD,OAAOS,MAAM,GAAI,IAG/B,SAASF,YACLF,QAAQC,IAAI,gBAEZ,IAAII,YAAc,GAGdA,YADDV,OAAOW,SAAS,MACDX,OAAOY,QAAQ,KAAK,KAEpBZ,OAGlB,IACIK,QAAQC,IAAI,kBACZL,WAAWY,KAAKH,cAAgB,IAAO,IAEzC,MAAOI,GACLb,UAAU,UAMlB,OACI,kEAAKc,UAAU,mBACX,0FACI,2DAAC,uCAAD,CAAQf,OAAQA,SAChB,2DAAC,uCAAD,CAAQgB,QAASb,cAMlBL,kC,6BC9Df,oBAWemB,IATf,SAAgBC,GAEZ,OACI,yBAAKH,UAAU,UACX,2BAAIG,EAAMlB,W,kDCOPmB,MAXf,SAAaD,GACT,OACI,4BACIE,KAAMF,EAAME,KACZJ,QAAS,kBAAME,EAAMF,QAAQE,EAAME,QAElCF,EAAME,OCgBJC,IArBf,SAAgBH,GAEZ,IAOMI,EANN,CAAI,CAAC,IAAK,KAAM,IAAK,KACjB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,SAEEC,KAClB,SAAAC,GAAG,OAAIA,EAAID,KACP,SAAAE,GAAC,OAAG,kBAAC,EAAD,CAAKD,IAAKC,EAAGT,QAASE,EAAMF,QAASI,KAAMK,UAIvD,OACI,6BAAMH,K,sKCPCI,MARf,WACE,OACE,yBAAKX,UAAU,OACX,kBAACjB,EAAA,EAAD,QCKY6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.b8402a80.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport KeyPad from \"./KeyPad\";\nimport Result from \"./Result\";\n\n\nfunction Calculator() {\n    const [result, setResult] = useState(\"\")\n\n    function reset() {\n        setResult(\"\");\n    }\n\n    function onKeyClick(button) {\n        console.log(\"on key click\", button);\n        if(button === \"=\"){\n            calculate()\n        } else if(button === \"C\"){\n            reset()\n        }\n        else if(button === \"CE\"){\n            backspace()\n        } else {\n            setResult(result + button)\n        }\n    }\n\n    function backspace(){\n        setResult(result.slice(0, -1))\n    }\n\n    function calculate() {\n        console.log(\"in calculate\")\n\n        var checkResult = ''\n\n        if(result.includes('--')){\n            checkResult = result.replace('--','+')\n        } else {\n            checkResult = result\n        }\n\n        try {\n            console.log(\"setting result\")\n            setResult((eval(checkResult) || \"\" ) + \"\")\n            \n        } catch (e) {\n            setResult(\"ERROR\")\n\n        }\n    }\n\n\n    return (\n        <div className=\"calculator-body\">\n            <h1>Simple Calculator</h1>\n                <Result result={result}/>\n                <KeyPad onClick={onKeyClick}/>\n            </div>\n    );\n    \n}\n\nexport default Calculator;","import React from 'react';\n\nfunction Result(props) {\n    \n    return (\n        <div className=\"result\">\n            <p>{props.result}</p>\n        </div>\n    )\n}\n\nexport default Result;","import React from 'react';\n\nfunction Key(props) {\n    return(\n        <button \n            name={props.name}\n            onClick={() => props.onClick(props.name)}\n        >\n            {props.name}\n        </button>\n    )\n}\n\nexport default Key;","import React  from 'react';\nimport Key from \"./Key\";\n\nfunction KeyPad(props) {\n\n    const keysJson = \n    [   [\"(\", \"CE\", \")\", \"C\"],\n        [\"1\", \"2\", \"3\", \"+\"],\n        [\"4\", \"5\", \"6\", \"-\"],\n        [\"7\", \"8\", \"9\", \"*\"],\n        [\".\", \"0\", \"=\", \"รท\"]\n    ];\n    const Keys = keysJson.map(\n        key => key.map(\n            k =><Key key={k} onClick={props.onClick} name={k}/>\n        )\n    );\n\n    return(\n        <div>{Keys}</div>\n        \n    )\n}\n\nexport default KeyPad;","import React from 'react'\nimport './App.css'\nimport Calculator from \"./component/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}